<h1 class="pb-4">All recipes</h1>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/" style="text-decoration: none;">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Recipes</li>
    </ol>
</nav>

<div class="container mt-2 grid-container">
    <div class="filter-section pr-4">
        <!-- Filter section content -->
        <div class="form-group">
            <label for="rating" class="form-label mb-0">เลือก Rating</label>
            <select id="rating" class="form-select mb-1">
                <option value="">ALL</option>
                <option value="5">5</option>
                <option value="4">4</option>
                <option value="3">3</option>
                <option value="2">2</option>
                <option value="1">1</option>
            </select>
            <label for="duration" class="form-label">ระยะเวลา <output for="duration" id="durationOutput">0
                    minutes</output></label><br>
            <input type="range" name="duration" id="duration" class="form-range" min="0" max="120" step="1" required>
            <div class="checkbox-container">
                <input type="checkbox" id="easy" name="difficulty" value="easy">
                <label for="easy">ง่าย</label>

                <input type="checkbox" id="medium" name="difficulty" value="medium">
                <label for="medium">ปานกลาง</label>

                <input type="checkbox" id="hard" name="difficulty" value="hard">
                <label for="hard">ยาก</label>
            </div>
            <div class="my-3">
                <button id="clearFiltersBtn" class="btn btn-secondary">Clear Filters</button>
            </div>
        </div>
    </div>
    <div class="data-section">
        <!-- Data section content -->
        <div class="row row-cols-2 row-cols-lg-5 g-2 g-lg-3" id="recipeList">
            <!-- Recipe items will be dynamically added here -->
        </div>
    </div>
</div>


<div id="loadingOverlay" class="loading-overlay">
    <div class="spinner"></div>
</div>

<script>
    const durationInput = document.getElementById('duration');
    const durationOutput = document.getElementById('durationOutput');
    document.addEventListener('DOMContentLoaded', () => {
        fetchData();
        // Add event listeners to difficulty checkboxes
        document.querySelectorAll('input[name="difficulty"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                fetchDataByDifficulty(checkbox.value);
            });
        });
        document.getElementById('clearFiltersBtn').addEventListener('click', clearFilters);
    });

    function clearFilters() {
        // Clear difficulty checkboxes
        document.querySelectorAll('input[name="difficulty"]').forEach(checkbox => {
            checkbox.checked = false;
        });

        // Reset rating dropdown to default value
        document.getElementById('rating').value = '';

        // Reset duration range input to default value
        document.getElementById('duration').value = 0;

        durationOutput.textContent = `≈ 0 minutes`;

        // Fetch all recipes again after clearing filters
        fetchData();
    }

    // Fetch data based on selected difficulty checkboxes
    async function fetchDataByDifficulty(difficulty) {
        const selectedDifficulties = Array.from(document.querySelectorAll('input[name="difficulty"]:checked')).map(input => input.value);
        try {
            const response = await fetch('/filterByDifficulty', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ difficulty: selectedDifficulties })
            });
            const data = await response.json();
            // Append new data to accumulated data
            renderRecipes(data?.recipes); // Render accumulated data
        } catch (error) {
            console.error('Error fetching data by difficulty:', error);
        }
    }

    document.getElementById('rating').addEventListener('change', handleRatingChange);

    async function fetchData() {
        try {
            const response = await fetch('/getAllRecipes');
            const data = await response.json();
            renderRecipes(data);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    async function handleRatingChange() {
        const minRating = document.getElementById('rating').value;

        // If "ALL" is selected, fetch all recipes
        if (minRating === '') {
            try {
                const response = await fetch('/getAllRecipes');
                const data = await response.json();
                renderRecipes(data);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        } else {
            // If a specific rating is selected, fetch filtered recipes
            try {
                const response = await fetch(`/filterByRating/${minRating}`);
                const data = await response.json();
                renderRecipes(data);
            } catch (error) {
                console.error('Error fetching filtered data:', error);
            }
        }
    }

    function renderRecipes(recipes) {
        const recipeList = document.getElementById('recipeList');
        recipeList.innerHTML = '';

        if (recipes.length > 0) {
            recipes.forEach(recipeItem => {
                const recipeLink = document.createElement('a');
                recipeLink.href = `/recipe/${recipeItem._id}`;
                recipeLink.className = 'col text-center category_link';

                const categoryImgContainer = document.createElement('div');
                categoryImgContainer.className = 'category_img category_img--large shadow';

                const img = document.createElement('img');
                img.src = `https://wongnok.s3.ap-east-1.amazonaws.com/public/uploads/${recipeItem.image}`;
                img.alt = recipeItem.name;
                img.loading = 'lazy';

                categoryImgContainer.appendChild(img);

                const nameElement = document.createElement('div');
                nameElement.className = 'pt-1';
                nameElement.textContent = recipeItem.name;

                recipeLink.appendChild(categoryImgContainer);
                recipeLink.appendChild(nameElement);

                recipeList.appendChild(recipeLink);
            });
        } else {
            recipeList.innerHTML = '<p>No items found.</p>';
        }
    }


    let timeoutId;

    durationInput.addEventListener('input', function () {
        durationOutput.textContent = `≈ ${this.value} minutes`;

        // Clear the previous timeout
        clearTimeout(timeoutId);

        // Set a new timeout to wait for 3 seconds before sending the POST request
        timeoutId = setTimeout(() => {
            // Construct the URL with the duration value as a query parameter
            const url = `/filterByDuration/${this.value}`;

            // Show the loading overlay
            loadingOverlay.style.display = 'flex';

            // Send a POST request to the URL
            fetch(url, {
                method: 'POST',
                // Add any additional options like headers or body as needed
            })
                .then(response => response.json()) // Parse the response as JSON
                .then(data => {
                    // Call the renderRecipes function with the data received from the server
                    renderRecipes(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                }).finally(() => {
                    // Hide the loading overlay once the request is completed
                    loadingOverlay.style.display = 'none';
                });
        }, 1000); // 3 seconds
    });
</script>